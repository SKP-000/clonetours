.row {
    max-width: $grid-width; // max width
    margin: 0 auto;

    @include respond(tab-port) {
        max-width: 50rem;
        padding: 0rem 3rem;
    }

    &:not(:last-child) {
        margin-bottom: $gutter-vertical;

        @include respond(tab-port) {
            margin-bottom: $gutter-vertical-small;
        }
    }

    @include clearfix;

    // Attribute selector -> Selects, in this case, all the elements having class attribute beginning with the keyword 'col-'
    [class^="col-"] {
        float: left;

        &:not(:last-child) {
            margin-right: $gutter-horizontal;

            @include respond(tab-port) {
                margin-right: 0;
                margin-bottom: $gutter-vertical-small;
            }

        }

        
        @include respond(tab-port) {
            width: 100% !important; // sets width to 100% so that on smaller devices there is only ONE Row instead of having columns.
        }

    }

    // width is 100% of the container width subtracted by one gutter horizontal margin divided by 2
    .col-1-of-2 {
        width: calc( ( 100% - #{$gutter-horizontal} ) / 2 );
    }

    // just like above but with 3 columns instead
    .col-1-of-3 {
        width: calc( ( 100% - 2 * #{$gutter-horizontal} ) / 3 );
    }

    // here, the column is actually 2 times a col-1-of-3 column. so we do 2 * width of col-1-of-3 and then we add the missing gutter-horizontal margin
    .col-2-of-3 {
        width: calc( 2 * ( ( 100% - 2 * #{$gutter-horizontal} ) / 3) + #{$gutter-horizontal} );
    }

    .col-1-of-4 {
        width: calc( ( 100% - 3 * #{$gutter-horizontal} ) / 4 );
    }

    // we do something similar here also
    .col-2-of-4 {
        width: calc( 2 * (( 100% - 3 * #{$gutter-horizontal} ) / 4) + #{$gutter-horizontal});
    }

    // a bit different but using the same concept. here it is actually 3 times the width of col-1-of-4
    .col-3-of-4 {
        width: calc( 3 * (( 100% - 3 * #{$gutter-horizontal} ) / 4) + (2 * #{$gutter-horizontal}) );
    }
}